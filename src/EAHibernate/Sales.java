package EAHibernate;
// Generated 07-feb-2018 10:21:04 by Hibernate Tools 4.3.1


import EA.Read;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import static EAHibernate.HibernateTools.getSessionFactory;

/**
 * Sales generated by hbm2java
 */
public class Sales  implements java.io.Serializable {


     private Integer id;
     private Clients clients;
     private Games games;
     private int quantity;
     private Date date;

    public Sales() {
    }

	
    public Sales(int quantity) {
        this.quantity = quantity;
    }
    public Sales(Clients clients, Games games, int quantity, Date date) {
       this.clients = clients;
       this.games = games;
       this.quantity = quantity;
       this.date = date;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public Clients getClients() {
        return this.clients;
    }
    
    public void setClients(Clients clients) {
        this.clients = clients;
    }
    public Games getGames() {
        return this.games;
    }
    
    public void setGames(Games games) {
        this.games = games;
    }
    public int getQuantity() {
        return this.quantity;
    }
    
    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
    public Date getDate() {
        return this.date;
    }
    
    public void setDate(Date date) {
        this.date = date;
    }

    //Methods
    public static void insertSale() {
        SessionFactory sf = getSessionFactory();
        Session s = sf.openSession();
        Transaction t = s.beginTransaction();
        Sales sa = new Sales();
        sa.setId(1);
        sa.setClients(new Clients(Read.Int("Enter the client ID: ")));
        sa.setGames(new Games(Read.Int("Enter the game ID: ")));
        sa.setDate(new Date());
        sa.setQuantity(Read.Int("Enter how many games you want to buy") );
        s.save(sa);
        t.commit();

    }

    public static void printSales() {
        SessionFactory sf = getSessionFactory();
        Session s = sf.openSession();
        Query q = s.createQuery("from Sales ");
        List results = q.list();
        Iterator iterator = results.iterator();
        System.out.println("GAME\t|\t CLIENT\t|\t DATE\t|\t QUANTITY\t\t |");
        while (iterator.hasNext()) {
            Sales sale = (Sales) iterator.next();
            Query q2 = s.createQuery("from Games WHERE id="+sale.getGames().getId());
            List results2 = q2.list();
            Iterator iterator2 = results2.iterator();
            Games game= (Games) iterator2.next();

            Query q3 = s.createQuery("from Clients WHERE id="+sale.getClients().getId());
            List results3 = q3.list();
            Iterator iterator3 = results3.iterator();
            Clients client= (Clients) iterator3.next();

            System.out.println(game.getName() + "\t\t" + client.getName() + "\t\t" + sale.getDate()+"\t\t"+sale.getQuantity());

        }
    }

    public static void updateSales() {
        SessionFactory sf = getSessionFactory();
        Session s = sf.openSession();
        Transaction t = s.beginTransaction();


        Games game = new Games();

        game.setId(Read.Int("Enter the Sale Id: "));
        game.setName(Read.String("Enter the name: "));
        game.setGenre(Read.String("Enter the genre: "));
        game.setPrice(Read.Float("Enter the price: "));
        game.setFranchises(new Franchises(Read.Int("Enter the Franchise Id: ")));
        s.update(game);
        t.commit();
        s.close();
        sf.close();
    }

    public static void deleteSales() {
        int id= Read.Int("Enter the sale Id: ");
        SessionFactory sf = getSessionFactory();
        Session s = sf.openSession();
        Transaction t = s.beginTransaction();
        Query q = s.createQuery("from Games where id =" +id);
        List results = q.list();
        Iterator iterator = results.iterator();

        Games g = (Games) iterator.next();
        s.delete(g);
        t.commit();
        s.close();
    }




}


